
PWM_EX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ab  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ad  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000017bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000184d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c0 00 	jmp	0x180	; 0x180 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	uint8_t duty1, duty2, Freq;
	DDRD |= (1 << DDD5);
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	80 62       	ori	r24, 0x20	; 32
  84:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD6);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
  8c:	84 b1       	in	r24, 0x04	; 4
  8e:	88 7f       	andi	r24, 0xF8	; 248
  90:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0) | (1 << PORTB1) | (1 << PORTB2); //PULL UP
  92:	85 b1       	in	r24, 0x05	; 5
  94:	87 60       	ori	r24, 0x07	; 7
  96:	85 b9       	out	0x05, r24	; 5
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	83 6a       	ori	r24, 0xA3	; 163
  9c:	84 bd       	out	0x24, r24	; 36
	//OCR0A = 180; //PD6
	//OCR0B = 50; //PD5
    
    while (1) 
    {
		if((PINB & (1 << PINB0)) == 0){
  9e:	18 99       	sbic	0x03, 0	; 3
  a0:	19 c0       	rjmp	.+50     	; 0xd4 <main+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9c e9       	ldi	r25, 0x9C	; 156
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <main+0x26>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
			_delay_ms(10);
			while((PINB & (1 << PINB)) == 0);
  ae:	83 b1       	in	r24, 0x03	; 3
  b0:	23 b1       	in	r18, 0x03	; 3
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <main+0x3a>
  b6:	95 95       	asr	r25
  b8:	87 95       	ror	r24
  ba:	2a 95       	dec	r18
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <main+0x36>
  be:	80 ff       	sbrs	r24, 0
  c0:	f6 cf       	rjmp	.-20     	; 0xae <main+0x2e>
			duty1++;
  c2:	3f 5f       	subi	r19, 0xFF	; 255
			if(duty1 > 10)duty1=0;
  c4:	3b 30       	cpi	r19, 0x0B	; 11
  c6:	08 f0       	brcs	.+2      	; 0xca <main+0x4a>
  c8:	30 e0       	ldi	r19, 0x00	; 0
			OCR0A = duty1*25;//0-255
  ca:	89 e1       	ldi	r24, 0x19	; 25
  cc:	38 9f       	mul	r19, r24
  ce:	80 2d       	mov	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	87 bd       	out	0x27, r24	; 39
		}
		
		if((PINB & (1 << PINB1)) == 0){
  d4:	19 99       	sbic	0x03, 1	; 3
  d6:	40 c0       	rjmp	.+128    	; 0x158 <main+0xd8>
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
			_delay_ms(10);
			while((PINB & (1 << PINB1)) == 0);
  e4:	19 9b       	sbis	0x03, 1	; 3
  e6:	fe cf       	rjmp	.-4      	; 0xe4 <main+0x64>
			Freq++;
  e8:	4f 5f       	subi	r20, 0xFF	; 255
			if(Freq > 5)Freq = 0;
  ea:	46 30       	cpi	r20, 0x06	; 6
  ec:	08 f0       	brcs	.+2      	; 0xf0 <main+0x70>
  ee:	40 e0       	ldi	r20, 0x00	; 0
			switch(Freq){
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	b9 f0       	breq	.+46     	; 0x122 <main+0xa2>
  f4:	28 f4       	brcc	.+10     	; 0x100 <main+0x80>
  f6:	44 23       	and	r20, r20
  f8:	49 f0       	breq	.+18     	; 0x10c <main+0x8c>
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	59 f0       	breq	.+22     	; 0x114 <main+0x94>
  fe:	2c c0       	rjmp	.+88     	; 0x158 <main+0xd8>
 100:	44 30       	cpi	r20, 0x04	; 4
 102:	e9 f0       	breq	.+58     	; 0x13e <main+0xbe>
 104:	a8 f0       	brcs	.+42     	; 0x130 <main+0xb0>
 106:	45 30       	cpi	r20, 0x05	; 5
 108:	09 f1       	breq	.+66     	; 0x14c <main+0xcc>
 10a:	26 c0       	rjmp	.+76     	; 0x158 <main+0xd8>
				
				case 0:
				TCCR0B&=~((1 << CS00) | (1 << CS01) | (1 << CS02)); //TCCR0B = 0;
 10c:	85 b5       	in	r24, 0x25	; 37
 10e:	88 7f       	andi	r24, 0xF8	; 248
 110:	85 bd       	out	0x25, r24	; 37
				break;
 112:	22 c0       	rjmp	.+68     	; 0x158 <main+0xd8>
				
				case 1:
				TCCR0B &= ~((1 << CS01) | (1 << CS02));
 114:	85 b5       	in	r24, 0x25	; 37
 116:	89 7f       	andi	r24, 0xF9	; 249
 118:	85 bd       	out	0x25, r24	; 37
				TCCR0B |= (1 << CS00);
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	81 60       	ori	r24, 0x01	; 1
 11e:	85 bd       	out	0x25, r24	; 37
				break;
 120:	1b c0       	rjmp	.+54     	; 0x158 <main+0xd8>
				
				case 2:
				TCCR0B &= ~((1 << CS00) | (1 << CS02));
 122:	85 b5       	in	r24, 0x25	; 37
 124:	8a 7f       	andi	r24, 0xFA	; 250
 126:	85 bd       	out	0x25, r24	; 37
				TCCR0B |= (1 << CS01);
 128:	85 b5       	in	r24, 0x25	; 37
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	85 bd       	out	0x25, r24	; 37
				break;
 12e:	14 c0       	rjmp	.+40     	; 0x158 <main+0xd8>
				
				case 3:
				TCCR0B &= ~(1 << CS02);
 130:	85 b5       	in	r24, 0x25	; 37
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	85 bd       	out	0x25, r24	; 37
				TCCR0B |= (1 << CS00) | (1 << CS01);
 136:	85 b5       	in	r24, 0x25	; 37
 138:	83 60       	ori	r24, 0x03	; 3
 13a:	85 bd       	out	0x25, r24	; 37
				break;
 13c:	0d c0       	rjmp	.+26     	; 0x158 <main+0xd8>
				
				case 4:
				TCCR0B &= ~((1 << CS00) | (1 << CS01));
 13e:	85 b5       	in	r24, 0x25	; 37
 140:	8c 7f       	andi	r24, 0xFC	; 252
 142:	85 bd       	out	0x25, r24	; 37
				TCCR0B |= (1 << CS02);
 144:	85 b5       	in	r24, 0x25	; 37
 146:	84 60       	ori	r24, 0x04	; 4
 148:	85 bd       	out	0x25, r24	; 37
				break;
 14a:	06 c0       	rjmp	.+12     	; 0x158 <main+0xd8>
				
				case 5:
				TCCR0B &= ~(1 << CS01);
 14c:	85 b5       	in	r24, 0x25	; 37
 14e:	8d 7f       	andi	r24, 0xFD	; 253
 150:	85 bd       	out	0x25, r24	; 37
				TCCR0B |= (1 << CS02) | (1 << CS00);
 152:	85 b5       	in	r24, 0x25	; 37
 154:	85 60       	ori	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
				break;

			}
		}
		
		if((PINB & (1 << PINB2)) == 0){
 158:	1a 99       	sbic	0x03, 2	; 3
 15a:	a1 cf       	rjmp	.-190    	; 0x9e <main+0x1e>
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	9c e9       	ldi	r25, 0x9C	; 156
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0xe0>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xe6>
 166:	00 00       	nop
			_delay_ms(10);
			while((PINB & (1 << PINB2)) == 0);
 168:	1a 9b       	sbis	0x03, 2	; 3
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0xe8>
			duty2++;
 16c:	5f 5f       	subi	r21, 0xFF	; 255
			if(duty2 > 10)duty2 = 0;
 16e:	5b 30       	cpi	r21, 0x0B	; 11
 170:	08 f0       	brcs	.+2      	; 0x174 <main+0xf4>
 172:	50 e0       	ldi	r21, 0x00	; 0
			OCR0B = duty2*25;
 174:	89 e1       	ldi	r24, 0x19	; 25
 176:	58 9f       	mul	r21, r24
 178:	80 2d       	mov	r24, r0
 17a:	11 24       	eor	r1, r1
 17c:	88 bd       	out	0x28, r24	; 40
 17e:	8f cf       	rjmp	.-226    	; 0x9e <main+0x1e>

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
